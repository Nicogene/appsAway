- name: Uninstall old versions
  hosts: nodes
  become: yes
  tasks:      
    - name: Purge docker
      shell: sudo apt-get -y purge docker-ce docker-ce-cli containerd.io
      args:
        warn: no
      when: ansible_distribution != 'MacOSX'
      
    - name: Uninstall old docker versions
      shell: sudo apt-get -y remove docker docker-engine docker.io containerd runc
      args:
        warn: no
      when: ansible_distribution != 'MacOSX'
      
    - name: Uninstall user group docker
      shell: groupdel docker
      args:
        warn: no
      ignore_errors: yes
      when: ansible_distribution != 'MacOSX'

    - name: Install packages to use a repository over HTTPS
      apt: 
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
          - lsb-release
        state: latest
        autoclean: yes
        update_cache: yes
      when: ansible_distribution != 'MacOSX'

    - name: Add Dockerâ€™s official GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        warn: no
      when: ansible_distribution != 'MacOSX'
        
    - name: Add Docker.io repository
      shell: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      ignore_errors: yes
      when: ansible_distribution != 'MacOSX'
      
    - name: Install the latest version of Docker Engine - Community
      apt: 
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
        autoclean: yes
        update_cache: yes
      ignore_errors: yes
      when: ansible_distribution != 'MacOSX'
#      no_log: true

    - name: Install docker plugin
      shell: docker plugin install --grant-all-permissions vieux/sshfs
      ignore_errors: yes
      when: ansible_distribution != 'MacOSX'

    - name: Install docker-compose
      apt: 
        name:
          - docker-compose
        state: latest
        autoclean: yes
        update_cache: false
      when: ansible_distribution != 'MacOSX'
      
    - name: Make docker run without sudo
      shell: usermod -aG docker {{ ansible_ssh_user }}
      ignore_errors: no
      when: ansible_distribution != 'MacOSX'

    - name: Enable docker.sock in all machines
      shell: chmod 666 /var/run/docker.sock
      args:
        warn: no
      when: ansible_distribution != 'MacOSX'
      
    - name: Activate docker group changes
      shell: echo "exit" | newgrp docker
      ignore_errors: no
      when: ansible_distribution != 'MacOSX'
      
    - name: Start docker
      shell: sudo systemctl start docker
      retries: 3
      delay: 30
      register: result
      until: result.rc == 0
      args:
        warn: no
      when: ansible_distribution != 'MacOSX'

    - name: Finishing up with needed packages 
      apt: 
        name:
          - openssh-client
          - openssh-server
          - curl
          - gnupg-agent
          - software-properties-common
        state: latest
        autoclean: yes
      when: ansible_distribution != 'MacOSX'

- name: Setting up GPUs for Cuda nodes
  hosts: cuda
  become: yes
  tasks:
    - name: Install nvidia-container-runtime
      apt:
        name:
          - nvidia-container-runtime
        state: latest
        autoclean: yes
      when: ansible_distribution != 'MacOSX'

    - name: Setting up GPUs for Cuda nodes docker configuration
      shell: "GPU_ID=`nvidia-smi -a | grep UUID | awk '{print substr($4,0,12)}'` && set -- $GPU_ID && GPU_actual=$1 && echo '{' > /etc/docker/daemon.json && echo '  \"runtimes\": {' >> /etc/docker/daemon.json && echo '    \"nvidia\": {' >> /etc/docker/daemon.json && echo '      \"path\": \"/usr/bin/nvidia-container-runtime\",' >> /etc/docker/daemon.json && echo '      \"runtimeArgs\": []' >> /etc/docker/daemon.json && echo '    }' >> /etc/docker/daemon.json && echo '  },' >> /etc/docker/daemon.json && echo '  \"default-runtime\": \"nvidia\",' >> /etc/docker/daemon.json && echo '  \"node-generic-resources\": [' >> /etc/docker/daemon.json && echo '    \"gpu=$GPU_actual\"' >> /etc/docker/daemon.json && echo '    ]' >> /etc/docker/daemon.json && echo '}' >> /etc/docker/daemon.json"
      args:
        warn: no
      when: ansible_distribution != 'MacOSX'

    - name: Restart docker daemon after cuda configuration
      shell: systemctl daemon-reload && systemctl start docker
      args:
        warn: no
      when: ansible_distribution != 'MacOSX'
