//ilaria-carlini
//
//&<h3>Field changed in app: <ins>Supervised Calibration Application</ins></h3><ul><li>with_robot: {content:You have <b>correctly</b> defined the application for your cluster!\nYou just need to <b>download the script</b> on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n<code>mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh</code>\n\n<b>Enjoy</b> the application!</p>,cmd:mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh,how_to_use:When the GUI is up and running, you will see different application options:\n\n1. **custom file checkbox**:<del> </del>\n<b> </b>   - if ticked, the custom field is enabled and there you can specify the path of your custom configuration file related to the robot you are using to run the app;\n<del> </del>    - if not ticked, the default file `icubEyes.ini`  is used; \n   \n   **Obs**: The application relies on a configuration file (i.e. icubEyes.ini or custom file) including an initial guess of the intrinsic and extrinsic camera parameters. The calibration procedure provides as result a refinement of such parameters, which are overwritten in the file. This is done to allow the modules responsible of undistorting the camera images to automatically load the correct file and avoid a manual copy of the calibration result. This implies that if you run the deployment multiple times, you will lose the result of the previous calibration. For this reason, we recommend you save this file or rename it before running another procedure.\n \n    **To check the output of the calibration**:\n    - if you ticked the **custom file checkbox**, you will find the output in your custom configuration file\n    - if you didn't, you will find it in the path returned by `yarp resource --context cameraCalibration --from icubEyes.ini`\n    In the same path, you will also find the images used for the calibration procedure.\n\n2. **drop-down list for the type of camera**: here you can choose to use RGB or event cameras. Be aware that you should select event cameras only if your robot has them. Depending on the chosen option, the content of the resolution drop-down list changes.\n3. **drop-down list for the resolution**: here you can choose the resolution of your cameras that will be calibrated. Depending on the chosen resolution, the content of the camera conf file drop-down list changes.\n4. **drop-down list for the camera conf file**: here you can select one of the proposed `.ini` files or a _Custom-file_. In this last case, a text field is enabled and here the user must insert his custom file in order to start the application. It's important to know that the file has to exist inside `robotology/robot-configuration/name_of_your_robot` and it has to correspond to the selected resolution. If one of these requirements is not satisfied, the application won't start.\n5. **mono calibration checkbox**: if not ticked, stereo calibration is triggered by default.\n\nAfter you selected the options you wish to use to run the application, press the 'Start Application' button. As soon as the GUI says 'The application has been deployed!', you are ready to use it. Remember to have with you a printed chessboard with pattern 8x6, which can be found at [this link](https://github.com/robotology/camera-calibration-supervisor/blob/main/gazebo/models/chessboard/materials/textures/Checkerboard-A4-30mm-8x6-1.jpg). A viewer will appear with a red bounding box: you will have to fit the chessboard into the bounding box until it becomes green. Note that if you selected the event-driven cameras you will need to use a flashing image, such as a chessboard flashing on a tablet. As soon as the calibration will be performed you will see two viewers appearing and showing the undistorted cameras.}</li></ul>
db.steps.update ({_id: ObjectId("600965c350feaf2f6cb2860b")},{$set: {with_robot: {"content":"You have <b>correctly</b> defined the application for your cluster!\nYou just need to <b>download the script</b> on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n<code>mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh</code>\n\n<b>Enjoy</b> the application!</p>","cmd":"mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh","how_to_use":"When the GUI is up and running, you will see different application options:\n\n1. **custom file checkbox**:\n    - if ticked, the custom field is enabled and there you can specify the path of your custom configuration file related to the robot you are using to run the app;\n    - if not ticked, the default file `icubEyes.ini`  is used; \n   \n   **Obs**: The application relies on a configuration file (i.e. icubEyes.ini or custom file) including an initial guess of the intrinsic and extrinsic camera parameters. The calibration procedure provides as result a refinement of such parameters, which are overwritten in the file. This is done to allow the modules responsible of undistorting the camera images to automatically load the correct file and avoid a manual copy of the calibration result. This implies that if you run the deployment multiple times, you will lose the result of the previous calibration. For this reason, we recommend you save this file or rename it before running another procedure.\n \n    **To check the output of the calibration**:\n    - if you ticked the **custom file checkbox**, you will find the output in your custom configuration file\n    - if you didn't, you will find it in the path returned by `yarp resource --context cameraCalibration --from icubEyes.ini`\n    In the same path, you will also find the images used for the calibration procedure.\n\n2. **drop-down list for the type of camera**: here you can choose to use RGB or event cameras. Be aware that you should select event cameras only if your robot has them. Depending on the chosen option, the content of the resolution drop-down list changes.\n3. **drop-down list for the resolution**: here you can choose the resolution of your cameras that will be calibrated. Depending on the chosen resolution, the content of the camera conf file drop-down list changes.\n4. **drop-down list for the camera conf file**: here you can select one of the proposed `.ini` files or a _Custom-file_. In this last case, a text field is enabled and here the user must insert his custom file in order to start the application. It's important to know that the file has to exist inside `robotology/robot-configuration/name_of_your_robot` and it has to correspond to the selected resolution. If one of these requirements is not satisfied, the application won't start.\n5. **mono calibration checkbox**: if not ticked, stereo calibration is triggered by default.\n\nAfter you selected the options you wish to use to run the application, press the 'Start Application' button. As soon as the GUI says 'The application has been deployed!', you are ready to use it. Remember to have with you a printed chessboard with pattern 8x6, which can be found at [this link](https://github.com/robotology/camera-calibration-supervisor/blob/main/gazebo/models/chessboard/materials/textures/Checkerboard-A4-30mm-8x6-1.jpg). A viewer will appear with a red bounding box: you will have to fit the chessboard into the bounding box until it becomes green. Note that if you selected the event-driven cameras you will need to use a flashing image, such as a chessboard flashing on a tablet. As soon as the calibration will be performed you will see two viewers appearing and showing the undistorted cameras."}}});
