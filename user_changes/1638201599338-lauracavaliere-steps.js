//lauracavaliere
//
//&<h3>Field changed in app: <ins>Supervised Calibration Application</ins></h3><ul><li>summary: The visual module <del>wi</del><b>a</b>ll<del> guide y</del>o<del>u in</del><b>ws</b> calibrating iCub cameras, by providing visual guidelines. You will have to place the chessboard into the bounding box shown on a display. When the pattern is in the desired position, the bounding box will become green. The display also shows the matching score between the pattern and the desired position, allowing you to calibrate the cameras smoothly. <del>Y</del><b>The application relies on a c</b>o<b>nfig</b>u<b>ration</b> <del>w</del><b>f</b>il<b>e (i.e. `icubEyes.ini` or a custom one) inc</b>l<b>uding</b> <b>an initial guess of t</b>h<b>e intrinsic </b>a<b>nd extrinsic camera parameters. The calibration procedure pro</b>v<b>id</b>e<b>s as</b> <b>resul</b>t<b> a refinement </b>o<b>f such</b> p<b>a</b>r<b>ameters, wh</b>i<b>ch are overwritte</b>n<b> in </b>t<b>he file. This is done to allow</b> the <del>ch</del><b>modul</b>es<b> respon</b>s<b>i</b>b<b>le f</b>o<b>r undistorting the c</b>a<b>me</b>r<b>a images to automatically loa</b>d <b>the correct file and avoid a manual co</b>p<b>y of the calibr</b>at<b>ion resul</b>t<b>. This impli</b>e<b>s that </b>r<b>un</b>n<b>ing</b> <del>(8x6)</del><b>the deployment multiple times</b>, <del>w</del><b>the result of t</b>h<b>e prev</b>i<b>ous </b>c<b>alibration will be overwritten. For t</b>h<b>is</b> <b>reason, we re</b>c<b>ommend s</b>a<b>vi</b>n<b>g or renaming this file</b> be<del> </del>fo<b>re r</b>un<b>ning another proce</b>d<b>ure.</b> <b>\n\nRemember th</b>at <del><</del><b>in order to perform the calibration, a **printed chessbo</b>a<b>rd</b> <b>wit</b>h<b> patte</b>r<b>n 8x6** is n</b>e<b>eded and can be </b>f<del>='</del><b>ound at [this link](</b>https://github.com/robotology/camera-calibration-supervisor/blob/main/gazebo/models/chessboard/materials/textures/Checkerboard-A4-30mm-8x6-1.jpg<del>'>this link</a></del><b>)</b>. <b>\n</b></li><li>requirements: [Ssh keyless access on machines allows to run smoothly without inserting password at every command,icub-main has to be compiled,Coffee/tea<b>,Motors on,yarprobotinterface running</b>]</li><li>with_robot: {content:You have <b>correctly</b> defined the application for your cluster!\nYou just need to <b>download the script</b> on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n<code>mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh</code>\n\n<b>Enjoy</b> the application!</p>,cmd:mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh,how_to_use:When the GUI is up and running, a list of the different application options will become available:\n\n1. A drop-down list for the **type of camera**: it is possible to choose between `RGB` or `Event Cameras`. Be careful and choose `Event Cameras` only if the robot you want to test the demo on has them. Depending on the chosen type of camera, the content of the **Resolution** drop-down list changes.\n\n2. A drop-down list for the **resolution**: it is possible to choose the resolution of the cameras that will be calibrated. Depending on the chosen resolution, the content of the **Camera Configuration File** drop-down list changes.\n\n3. A checkbox for **Run the cameras manually**: <del>T</del><b>t</b>he user has the choice to run the camera devices manually with the chosen resolution. This option disables `Camera Configuration File` as the user is doing it manually. \n\n4. A drop-down list for the **Camera Configuration File**<b> (i.e. file needed to run the camera device)</b>: it is possible to select one of the proposed configuration files (`.ini` extension).\n\n5. A checkbox for using a **Custom iCubEyes.ini File**: if ticked, the underlying text input is enabled and it is possible to specify the <b>**</b>path<b>**</b> of a custom `iCubEyes.ini`, otherwise the default file `icubEyes.ini`  is used; \n\n6. A checkbox for the **Mono Calibration**: if not ticked, stereo calibration is triggered by default.\n\n<del>   **Notes**: The application relies on a configuration file (i.e. `icubEyes.ini` or a custom one) including an initial guess of the intrinsic and extrinsic camera parameters. The calibration procedure provides as result, a refinement of such parameters, which are overwritten in the file. This is done to allow the modules responsible for undistorting the camera images to automatically load the correct file and avoid a manual copy of the calibration result. This implies that running the deployment multiple times, the result of the previous calibration will be overwritten. For this reason, we recommend saving or renaming this file before running another procedure.\n \n    **How to check the output of the calibration**: if the Camera Configuration File used is a custom one, the output of the calibration will be in the specified file; otherwise, the output of the calibration will be in the path returned by `yarp resource --context cameraCalibration --from icubEyes.ini`\n\n</del>After the selection of all the options needed to run the application, the application can be launched<b> by</b> pressing the **Start Application** button. As soon as the GUI says 'The application has been deployed!', the demo is ready to be used. Remember that in order to perform the calibration, a **printed chessboard with pattern 8x6** is needed and can be found at [this link](https://github.com/robotology/camera-calibration-supervisor/blob/main/gazebo/models/chessboard/materials/textures/Checkerboard-A4-30mm-8x6-1.jpg). A viewer with a red bounding box will appear: the chessboard need<b>s</b> to fit into the bounding box in order to let it becomes green and to proceed in the calibration. Note that with Event-driven Cameras a flashing image is required, such as a chessboard flashing on a tablet. As soon as the calibration will be performed, two viewers will appear showing, as result, the undistorted cameras<b>.\n\n**How to check the output of the calibration**: if the **iCubEyes.ini File** used during the deployment is a custom one, the output of the calibration will be in the file specified in the GUI; otherwise, if option 5. has not been ticked, the output of the calibration will be in the path returned by `yarp resource --context cameraCalibration --from icubEyes.ini`.,adv:It is possible to set a different matching score between the pattern and the desired position by running the `setPercentage` function on the port `yarp rpc /calibSupervisor/rpc` (e.g. `setPercentage 80.0`)</b>.}</li></ul>
db.steps.update ({_id: ObjectId("600965c350feaf2f6cb28608")},{$set: {summary: "The visual module allows calibrating iCub cameras, by providing visual guidelines. You will have to place the chessboard into the bounding box shown on a display. When the pattern is in the desired position, the bounding box will become green. The display also shows the matching score between the pattern and the desired position, allowing you to calibrate the cameras smoothly. The application relies on a configuration file (i.e. `icubEyes.ini` or a custom one) including an initial guess of the intrinsic and extrinsic camera parameters. The calibration procedure provides as result a refinement of such parameters, which are overwritten in the file. This is done to allow the modules responsible for undistorting the camera images to automatically load the correct file and avoid a manual copy of the calibration result. This implies that running the deployment multiple times, the result of the previous calibration will be overwritten. For this reason, we recommend saving or renaming this file before running another procedure. \n\nRemember that in order to perform the calibration, a **printed chessboard with pattern 8x6** is needed and can be found at [this link](https://github.com/robotology/camera-calibration-supervisor/blob/main/gazebo/models/chessboard/materials/textures/Checkerboard-A4-30mm-8x6-1.jpg). \n",requirements: ["Ssh keyless access on machines allows to run smoothly without inserting password at every command","icub-main has to be compiled","Coffee/tea","Motors on","yarprobotinterface running"]}});
db.steps.update ({_id: ObjectId("600965c350feaf2f6cb2860b")},{$set: {with_robot: {"content":"You have <b>correctly</b> defined the application for your cluster!\nYou just need to <b>download the script</b> on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n<code>mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh</code>\n\n<b>Enjoy</b> the application!</p>","cmd":"mkdir -p ~/teamcode/ && mv ~/Downloads/superviseCalib_setup.txt ~/teamcode/superviseCalib_setup.sh && cd ~/teamcode/ && chmod +x superviseCalib_setup.sh && ./superviseCalib_setup.sh","how_to_use":"When the GUI is up and running, a list of the different application options will become available:\n\n1. A drop-down list for the **type of camera**: it is possible to choose between `RGB` or `Event Cameras`. Be careful and choose `Event Cameras` only if the robot you want to test the demo on has them. Depending on the chosen type of camera, the content of the **Resolution** drop-down list changes.\n\n2. A drop-down list for the **resolution**: it is possible to choose the resolution of the cameras that will be calibrated. Depending on the chosen resolution, the content of the **Camera Configuration File** drop-down list changes.\n\n3. A checkbox for **Run the cameras manually**: the user has the choice to run the camera devices manually with the chosen resolution. This option disables `Camera Configuration File` as the user is doing it manually. \n\n4. A drop-down list for the **Camera Configuration File** (i.e. file needed to run the camera device): it is possible to select one of the proposed configuration files (`.ini` extension).\n\n5. A checkbox for using a **Custom iCubEyes.ini File**: if ticked, the underlying text input is enabled and it is possible to specify the **path** of a custom `iCubEyes.ini`, otherwise the default file `icubEyes.ini`  is used; \n\n6. A checkbox for the **Mono Calibration**: if not ticked, stereo calibration is triggered by default.\n\nAfter the selection of all the options needed to run the application, the application can be launched by pressing the **Start Application** button. As soon as the GUI says 'The application has been deployed!', the demo is ready to be used. Remember that in order to perform the calibration, a **printed chessboard with pattern 8x6** is needed and can be found at [this link](https://github.com/robotology/camera-calibration-supervisor/blob/main/gazebo/models/chessboard/materials/textures/Checkerboard-A4-30mm-8x6-1.jpg). A viewer with a red bounding box will appear: the chessboard needs to fit into the bounding box in order to let it becomes green and to proceed in the calibration. Note that with Event-driven Cameras a flashing image is required, such as a chessboard flashing on a tablet. As soon as the calibration will be performed, two viewers will appear showing, as result, the undistorted cameras.\n\n**How to check the output of the calibration**: if the **iCubEyes.ini File** used during the deployment is a custom one, the output of the calibration will be in the file specified in the GUI; otherwise, if option 5. has not been ticked, the output of the calibration will be in the path returned by `yarp resource --context cameraCalibration --from icubEyes.ini`.","adv":"It is possible to set a different matching score between the pattern and the desired position by running the `setPercentage` function on the port `yarp rpc /calibSupervisor/rpc` (e.g. `setPercentage 80.0`)."}}});
